{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;AAE8B;AACQ;;AAEtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA,4BAA4B,uDAAU;;AAEtC;AACA;;AAEA;;AAEA;;AAEA,gBAAgB,4DAAQ;AACxB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB,cAAc;AACd;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,KAAK;;;;;;;;;;;;;;AC1DL;AACf;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C;AAC7C;AACA,8DAA8D,WAAW,6BAA6B;AACtG,kBAAkB;AAClB,8CAA8C;AAC9C;AACA,aAAa;AACb,SAAS;AACT;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;;;;;;;;;;;;;;AClFe;;AAEf;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5Ee;AACf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,UAAU,qBAAqB;;AAE/B;AACA;;AAEA;AACA;AACA,MAAM;AACN;;AAEA;;AAEA;;AAEA;AACA;AACA,6CAA6C,WAAW;;AAExD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B,GAAG;AAC7B;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C;AAC1C;AACA;AACA;;AAEA,+BAA+B,gBAAgB;AAC/C;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,2CAA2C,KAAK;AAChD;AACA;AACA,4CAA4C,KAAK;AACjD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChKA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA,0CAA0C,IAAI,YAAY,cAAc;AACxE;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,2CAA2C,IAAI,YAAY,cAAc;AACzE;;AAEA;AACA;;;;;;;;UCxBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACA;;AAEoC;AACA;AACU;;AAE9C;AACA,IAAI,0DAAK;AACT,IAAI,0DAAK;AACT;AACA,CAAC,C","sources":["webpack://validation/./js/modules/forms.js","webpack://validation/./js/modules/modal.js","webpack://validation/./js/modules/phoneinput.js","webpack://validation/./js/modules/validation.js","webpack://validation/./js/services/services.js","webpack://validation/webpack/bootstrap","webpack://validation/webpack/runtime/define property getters","webpack://validation/webpack/runtime/hasOwnProperty shorthand","webpack://validation/webpack/runtime/make namespace object","webpack://validation/./js/script.js"],"sourcesContent":["import {\n    postData\n} from \"../services/services\";\nimport validation from \"./validation\";\n\nfunction forms(formSelector, modalSelector, messageSelector, btnCloseSelector) {\n    const forms = document.querySelectorAll(formSelector),\n        modal = document.querySelector(modalSelector),\n        message = document.querySelector(messageSelector),\n        btnClose = document.querySelectorAll(btnCloseSelector);\n\n    btnClose.forEach(closer => {\n        closer.addEventListener('click', () => {\n            message.classList.remove('success');\n            message.classList.remove('failure');\n            document.body.classList.remove('fixed');\n        })\n    })\n\n    forms.forEach(item => {\n        bindPostData(item);\n    })\n\n    function bindPostData(form) {\n        form.addEventListener('submit', (e) => {\n            e.preventDefault();\n\n            const isValid = validation(form, '.input-name', '.input-phone', '.input-password', '.input-email')\n\n            if (isValid) {\n                document.body.classList.add('sending');\n\n                const formData = new FormData(form);\n\n                const json = JSON.stringify(Object.fromEntries(formData.entries()));\n\n                postData('http://localhost:3000/request', json)\n                    .then(() => {\n                        closeModal();\n                        message.classList.add('success');\n                    }).catch(() => {\n                        closeModal();\n                        message.classList.add('failure');\n                    }).finally(() => {\n                        form.reset();\n                    })\n            } else {\n                console.log('Ошибка валидации формы');\n            }\n        })\n    }\n\n    function closeModal() {\n        document.body.classList.remove('sending');\n        modal.classList.remove('modal-open');\n    }\n}\n\nexport default forms;","export default function modal(btnOpenSelector, btnCloseSelector, modalSelector, showHidePasswordSelector) {\n    const btnOpen = document.querySelectorAll(btnOpenSelector),\n        btnClose = document.querySelector(btnCloseSelector),\n        modal = document.querySelector(modalSelector),\n        showHidePassword = document.querySelector(showHidePasswordSelector);\n\n\n    function closeModal() {\n        modal.classList.remove('modal-open');\n        document.body.classList.remove('fixed');\n    }\n\n    function openModal() {\n        modal.classList.add('modal-open');\n        document.body.classList.add('fixed');\n    }\n\n    /**\n     * handleFloatingLabel — функция для управления состоянием \"плавающей метки\".\n     * Она уменьшает и перемещает метку вверх, когда поле ввода содержит текст,\n     * и возвращает метку в исходное положение, если поле ввода пустое.\n     *\n     * Функция работает с набором инпутов и соответствующими метками.\n     */\n\n\n    function handleFloatingLabel() {\n        const labels = document.querySelectorAll('.label');\n        const inputs = document.querySelectorAll('.modal input');\n\n        inputs.forEach((input, index) => {\n            input.addEventListener('input', () => {\n                const label = labels[index]; // Связываем конкретный инпут с его лейблом\n                if (input.value !== '') {\n                    label.style.cssText = 'font-size: 0.8rem; top: 10px; transform: translateY(-150%);';\n                } else {\n                    label.style.cssText = ''; // Возвращаем лейбл в исходное положение, если инпут пустой\n                }\n            });\n        });\n    }\n\n    showHidePassword.addEventListener('click', function (event) {\n\n        event.preventDefault();\n\n        if (event.target.classList.contains('password-control')) {\n            const passwordInput = document.querySelector('.input-password');\n\n            if (passwordInput.type === 'password') {\n                event.target.classList.add('view');\n                passwordInput.type = 'text';\n            } else {\n                event.target.classList.remove('view');\n                passwordInput.type = 'password';\n            }\n       }\n    });\n\n    // function showModalByScroll() {\n    //     if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {\n    //         openModal();\n    //         window.removeEventListener('scroll', showModalByScroll);\n    //     }\n    // }\n\n    btnOpen.forEach((item) => {\n        item.addEventListener('click', () => openModal())\n    })\n\n    btnClose.addEventListener('click', () => closeModal())\n\n    modal.addEventListener('click', (event) => {\n        if (event.target.className == 'modal modal-open') closeModal()\n    })\n\n    document.addEventListener('keydown', function (event) {\n        if (event.code == 'Escape' && modal.classList.contains('modal-open')) closeModal()\n    })\n\n    // window.addEventListener('scroll', showModalByScroll);\n    handleFloatingLabel();\n}","export default function phoneInput() {\n\n    let phoneInputs = document.querySelectorAll('input[data-tel-input]');\n\n    let getInputNumbersValue = function (input) {\n        // Return stripped input value — just numbers\n        return input.value.replace(/\\D/g, '');\n    }\n\n    let onPhonePaste = function (e) {\n        let input = e.target,\n            inputNumbersValue = getInputNumbersValue(input);\n        let pasted = e.clipboardData || window.clipboardData;\n        if (pasted) {\n            let pastedText = pasted.getData('Text');\n            if (/\\D/g.test(pastedText)) {\n                // Attempt to paste non-numeric symbol — remove all non-numeric symbols,\n                // formatting will be in onPhoneInput handler\n                input.value = inputNumbersValue;\n                return;\n            }\n        }\n    }\n\n    let onPhoneInput = function (e) {\n        let input = e.target,\n            inputNumbersValue = getInputNumbersValue(input),\n            selectionStart = input.selectionStart,\n            formattedInputValue = \"\";\n\n        if (!inputNumbersValue) {\n            return input.value = \"\";\n        }\n\n        if (input.value.length != selectionStart) {\n            // Editing in the middle of input, not last symbol\n            if (e.data && /\\D/g.test(e.data)) {\n                // Attempt to input non-numeric symbol\n                input.value = inputNumbersValue;\n            }\n            return;\n        }\n\n        if ([\"7\", \"8\", \"9\"].indexOf(inputNumbersValue[0]) > -1) {\n            if (inputNumbersValue[0] == \"9\") inputNumbersValue = \"7\" + inputNumbersValue;\n            let firstSymbols = (inputNumbersValue[0] == \"8\") ? \"8\" : \"+7\";\n            formattedInputValue = input.value = firstSymbols + \" \";\n            if (inputNumbersValue.length > 1) {\n                formattedInputValue += '(' + inputNumbersValue.substring(1, 4);\n            }\n            if (inputNumbersValue.length >= 5) {\n                formattedInputValue += ') ' + inputNumbersValue.substring(4, 7);\n            }\n            if (inputNumbersValue.length >= 8) {\n                formattedInputValue += '-' + inputNumbersValue.substring(7, 9);\n            }\n            if (inputNumbersValue.length >= 10) {\n                formattedInputValue += '-' + inputNumbersValue.substring(9, 11);\n            }\n        } else {\n            formattedInputValue = '+' + inputNumbersValue.substring(0, 16);\n        }\n        input.value = formattedInputValue;\n    }\n    let onPhoneKeyDown = function (e) {\n        // Clear input after remove last symbol\n        let inputValue = e.target.value.replace(/\\D/g, '');\n        if (e.keyCode == 8 && inputValue.length == 1) {\n            e.target.value = \"\";\n        }\n    }\n    for (let phoneInput of phoneInputs) {\n        phoneInput.addEventListener('keydown', onPhoneKeyDown);\n        phoneInput.addEventListener('input', onPhoneInput, false);\n        phoneInput.addEventListener('paste', onPhonePaste, false);\n    }\n}","export default function validation(form, inputName, inputPhone, inputPassword, inputEmail) {\n    const nameInput = form.querySelector(inputName);\n    const phoneInput = form.querySelector(inputPhone);\n    const passwordInput = form.querySelector(inputPassword);\n    const emailInput = form.querySelector(inputEmail);\n\n    let isValid = true;\n\n    let message = {\n        name: {\n            required: 'Введите имя пользователя',\n            minLength: 'Введите не менее 2 символов',\n            correct: 'Имя не должно содержать цифр'\n        },\n        phone: {\n            required: 'Введите номер телефона',\n            minLength: 'Введите не менее 11 символов',\n            correct: 'Номер не должен содержать буквы',\n        },\n        email: {\n            required: 'Введите электронную почту',\n            correct: 'Введите корректный email'\n        }\n    }\n\n    let { name, phone, email } = message;\n\n    errorWork(nameInput, 'name', 2, /\\d/, name);\n    errorWork(phoneInput, 'phone', 11, /\\D/, phone);\n\n    if (passwordInput) {\n        passwordErrorWork();\n    } else if (emailInput) {\n        emailErrorWork();\n\n    }\n\n    return isValid;\n\n    function errorWork(input, classError, length, regex, message) {\n        createError(input, classError);\n        const error = form.querySelector(`.${classError}__error`);\n\n        const validateField = () => {\n            validationNamePhone(input, error, length, regex, message);\n        };\n\n        input.removeEventListener('input', validateField);\n        input.addEventListener('input', validateField);\n        validateField();\n    }\n\n    function emailErrorWork() {\n        createError(emailInput, 'email');\n        const emailError = form.querySelector('.email__error');\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n        const validateEmailField = () => {\n            validationEmail(emailInput, emailError, emailRegex, email);\n        };\n\n        emailInput.removeEventListener('input', validateEmailField);\n        emailInput.addEventListener('input', validateEmailField);\n        validateEmailField();\n    }\n\n    function passwordErrorWork() {\n        const passwordErrors = form.querySelectorAll('.password__error');\n\n        const validatePasswordField = () => {\n            validatePassword(passwordInput, passwordErrors);\n        };\n\n        passwordInput.removeEventListener('input', validatePasswordField);\n        passwordInput.addEventListener('input', validatePasswordField);\n        validatePasswordField();\n    }\n\n    function validationNamePhone(input, error, length, regex, message) {\n        let fieldIsValid = true;\n\n        if (input.value.trim() === '') {\n            error.innerHTML = message.required;\n            error.style.display = 'block';\n            fieldIsValid = false;\n        } else if (regex.test(input.value)) {\n            error.innerHTML = message.correct;\n            error.style.display = 'block';\n            fieldIsValid = false;\n        } else if (input.value.length < length) {\n            error.innerHTML = message.minLength;\n            error.style.display = 'block';\n            fieldIsValid = false;\n        } else {\n            error.style.display = 'none';\n        }\n\n        if (!fieldIsValid) isValid = false;\n    }\n\n    function validationEmail(input, error, regex, message) {\n        let fieldIsValid = true;\n\n        if (input.value.trim() === '') {\n            error.innerHTML = message.required;\n            error.style.display = 'block';\n            fieldIsValid = false;\n        } else if (!regex.test(input.value)) {\n            error.innerHTML = message.correct;\n            error.style.display = 'block';\n            fieldIsValid = false;\n        } else {\n            error.style.display = 'none';\n        }\n\n        if (!fieldIsValid) isValid = false;\n    }\n\n    function validatePassword(input, errors) {\n        const validations = [{\n                regex: /.{8,}/,\n                element: errors[0]\n            },\n            {\n                regex: /[A-ZА-ЯЁ]/,\n                element: errors[1]\n            },\n            {\n                regex: /[a-zа-яё]/,\n                element: errors[2]\n            },\n            {\n                regex: /[0-9]/,\n                element: errors[3]\n            },\n            {\n                regex: /[!@#$%^&*(),.?\":{}|<>]/,\n                element: errors[4]\n            }\n        ];\n\n        validations.forEach(({ regex, element }) => {\n            if (regex.test(input.value)) {\n                element.style.color = 'green';\n            } else {\n                isValid = false;\n                element.style.color = 'rgba(255, 60, 0, 1)';\n            }\n        });\n    }\n\n    function createError(input, name) {\n        let error = form.querySelector(`.${name}__error`);\n        if (!error) {\n            error = document.createElement('span');\n            error.classList.add('error', `${name}__error`);\n            error.style.display = 'none';\n            input.insertAdjacentElement('afterend', error);\n        }\n    }\n}","const postData = async (url, data) => {\n    const result = await fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Content-type': 'application/json',\n        },\n        body: data\n    });\n\n    if (!result.ok) {\n        throw new Error(`Could not post ${url}, status: ${result.status}`);\n    }\n\n    return await result.json();\n};\n\nconst getResource = async (url) => {\n    const result = await fetch(url);\n\n    if (!result.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${result.status}`)\n    }\n\n    return await result.json()\n}\n\nexport { postData, getResource };","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import 'core-js/stable';\n// import 'regenerator-runtime/runtime';\n\nimport forms from './modules/forms';\nimport modal from './modules/modal';\nimport phoneInput from './modules/phoneinput';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    forms('form', '.modal', '.message', '[data-close]');\n    modal('[data-modal]', '[data-close]', '.modal', '.password-control');\n    // phoneInput();\n})"],"names":[],"sourceRoot":""}